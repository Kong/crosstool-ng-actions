name: Build cross compilers
'on':
  workflow_dispatch:
    inputs:
      do_release:
        description: Create a release and upload files? (type "yes" to create)
        required: true
        type: boolean
        default: false
      release:
        description: Release tag and name
        required: true
permissions:
  contents: write # create release

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      upload_url: '${{ steps.create_release.outputs.upload_url }}'
    steps:
      - name: Create release
        uses: ncipollo/release-action@v1
        id: create_release
        if: '${{ github.event.inputs.do_release == ''true'' }}'
        with:
          tag: '${{ github.event.inputs.release }}'
          name: '${{ github.event.inputs.release }}'
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  compile:
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      TARGET: '${{ matrix.target }}'
      CROSSTOOL_NG_VERSION: '1.26.0'
    strategy:
      matrix:
        include:
          # https://distrowatch.com/table.php?distribution=redhat
          # centos8 same as rhel8
          - target: aarch64-rhel8-linux-gnu
            vendor: rhel8
            glibc: "2.28"
            linux: "4.18"
            gcc: "8.5.0"
          - target: aarch64-rhel9-linux-gnu
            vendor: rhel9
            glibc: "2.34"
            linux: "5.14"
            gcc: "11.3.0"

          # https://docs.aws.amazon.com/linux/al2022/release-notes/version-compare-al2022.html
          - target: aarch64-aws2-linux-gnu
            vendor: aws2
            glibc: "2.26"
            linux: "4.14"
            gcc: "7.3.0"
          - target: aarch64-aws2-linux-gnu
            vendor: aws2
            glibc: "2.26"
            linux: "4.14"
            gcc: "8.5.0"
          - target: aarch64-aws2023-linux-gnu
            vendor: aws2023
            glibc: "2.34"
            linux: "6.1"
            gcc: "11.3.0"

          - target: x86_64-aws2-linux-gnu
            vendor: aws2
            glibc: "2.26"
            linux: "4.14"
            gcc: "7.3.0"
          - target: x86_64-aws2-linux-gnu
            vendor: aws2
            glibc: "2.26"
            linux: "4.14"
            gcc: "8.5.0"


    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Cache Packages
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            x-tools
          key: ${{ hashFiles('.github/**/*.yml') }}-${{ matrix.target }}-${{ matrix.gcc }}-${{ matrix.glibc }}-${{ matrix.linux }}
          # for testing
          #key: ${{ matrix.target }}

      - name: 'Install dependencies'
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |-
          sudo sed -i "s/azure.archive.ubuntu.com/mirror.arizona.edu/g" /etc/apt/sources.list
          sudo apt update
          sudo apt install build-essential autoconf bison flex texinfo \
            help2man gawk libtool libtool-bin libtool-doc libncurses5-dev python3-dev \
            python3-distutils git unzip

      - name: "Download and build crosstool-ng"
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |-
          wget http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-$CROSSTOOL_NG_VERSION.tar.bz2
          tar xf crosstool-ng-$CROSSTOOL_NG_VERSION.tar.bz2
          cd crosstool-ng-$CROSSTOOL_NG_VERSION
          ./configure --enable-local
          make
          sudo make install

      - name: "Configure target ${{ matrix.target }}"
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |-
          cd crosstool-ng-$CROSSTOOL_NG_VERSION
          ./ct-ng

          config_path=./samples/${{ matrix.target }}
          target=${{ matrix.target }}
          cp -r ${{ github.workspace}}/samples/${target%%-*}-unknown-linux-gnu $config_path

          if [[ -n "${{ matrix.vendor }}" ]]; then
            echo "CT_TARGET_VENDOR=\"${{ matrix.vendor }}\"" >> $config_path/crosstool.config
          fi
          
          linux_ver=${{ matrix.linux }}
          echo "CT_LINUX_V_${linux_ver//./_}=y" >> $config_path/crosstool.config

          glibc_ver=${{ matrix.glibc }}
          echo "CT_GLIBC_V_${glibc_ver//./_}=y" >> $config_path/crosstool.config

          gcc_ver=${{ matrix.gcc }}
          echo "CT_GCC_V_${gcc_ver//./_}=y" >> $config_path/crosstool.config

          if [[ "$gcc_ver" == 7.3.0 ]]; then
            echo 'CT_ISL_V_0_16=y' >> $config_path/crosstool.config
          fi

          echo "CT_LOG_PROGRESS_BAR=n" >> $config_path/crosstool.config
          
          cat $config_path/crosstool.config

          ./ct-ng ${{ matrix.target }}
          
          # replace the minor/patch version
          sed -i 's/CT_GCC_VERSION=.*/CT_GCC_VERSION="'${gcc_ver}'"/' .config

      - name: 'Build ${{ matrix.target }}'
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |-
          cd crosstool-ng-$CROSSTOOL_NG_VERSION

          export HOME=$GITHUB_WORKSPACE

          ./ct-ng build

          find $HOME/x-tools/

      - name: 'Package ${{ matrix.target }}'
        id: package
        run: |-
          target=${{ matrix.target }}
          tar -zcvf ${{ matrix.target }}.tar.gz -C $GITHUB_WORKSPACE/x-tools --exclude=build.log.bz2 $target

      - name: 'Set asset name'
        id: asset_name
        run: |-
          asset=${{ matrix.target }}.tar.gz
          gcc_ver=${{ matrix.gcc }}
          gcc_major_ver=${gcc_ver%%.*}
          libc="-glibc-${{ matrix.glibc }}"
          asset=${{ matrix.target }}${libc}-gcc-${gcc_major_ver}.tar.gz

          echo "asset=$asset" >> $GITHUB_OUTPUT

      - name: 'Generate SHA256 checksum'
        run: |
          sha256sum ${{ matrix.target }}.tar.gz > ${{ matrix.target }}.tar.gz.sha256
          echo "${{ matrix.target }}.tar.gz SHA256: $(cat ${{ matrix.target }}.tar.gz.sha256)" >> $GITHUB_STEP_SUMMARY

      - id: upload-artifacts
        name: Upload artifacts
        if: '${{ success() }}'
        continue-on-error: false
        uses: actions/upload-artifact@v4
        with:
          path: |
            ${{ matrix.target }}.tar.gz
            ${{ matrix.target }}.tar.gz.sha256
          name: '${{ steps.asset_name.outputs.asset }}'

      - id: upload-releases
        name: Upload to releases
        uses: actions/upload-release-asset@v1
        if: '${{ github.event.inputs.do_release == ''true'' }}'
        continue-on-error: false
        with:
          asset_path: '${{ matrix.target }}.tar.gz'
          asset_name: '${{ steps.asset_name.outputs.asset }}'
          upload_url: '${{ needs.prepare.outputs.upload_url }}'
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  generate_summary:
    needs: [prepare, compile]
    runs-on: ubuntu-latest
    if: '${{ github.event.inputs.do_release == ''true'' }}'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate summary
        run: |
          echo "# SHA256 Checksums" > summary.md
          echo "" >> summary.md
          find artifacts -type f -name "*.sha256" | sort | while read -r file; do
            echo "## $(basename "${file%.sha256}")" >> summary.md
            echo "\`\`\`" >> summary.md
            cat "$file" >> summary.md
            echo "\`\`\`" >> summary.md
            echo "" >> summary.md
          done

      - name: Update release with summary
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: '${{ github.event.inputs.release }}'
          bodyFile: "summary.md"
          token: '${{ secrets.GITHUB_TOKEN }}'
