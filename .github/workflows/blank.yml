name: Build cross compilers
'on':
  workflow_dispatch:
    inputs:
      do_release:
        description: Create a release and upload files? (type "yes" to create)
        required: true
        type: boolean
        default: false
      release:
        description: Release tag and name
        required: true
permissions:
  contents: write # create release

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      upload_url: '${{ steps.create_release.outputs.upload_url }}'
    steps:
      - name: Create release
        uses: ncipollo/release-action@v1
        id: create_release
        if: '${{ github.event.inputs.do_release == ''true'' }}'
        with:
          tag: '${{ github.event.inputs.release }}'
          name: '${{ github.event.inputs.release }}'
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  compile:
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      TARGET: '${{ matrix.target }}'
      CROSSTOOL_NG_VERSION: '1.23.0'
    strategy:
      matrix:
        include:
          - target: x86_64-rhel7-linux-gnu
            vendor: rhel7
            glibc: "2.17"
            linux: "3.10.0-229.14.1.el7"
            gcc: "4.8.5"


    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Cache Packages
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            x-tools
          key: ${{ hashFiles('.github/**/*.yml') }}-${{ matrix.target }}
          # for testing
          #key: ${{ matrix.target }}

      - name: 'Install dependencies'
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |-
          sudo sed -i "s/azure.archive.ubuntu.com/mirror.arizona.edu/g" /etc/apt/sources.list
          sudo apt update
          sudo apt install build-essential autoconf bison flex texinfo \
            help2man gawk libtool libtool-bin libtool-doc libncurses5-dev python3-dev \
            python3-distutils git unzip gperf gcc-9 g++-9

          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 10
          
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 10
          
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30
          sudo update-alternatives --set cc /usr/bin/gcc
          
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30
          sudo update-alternatives --set c++ /usr/bin/g++

          gcc --version
          g++ --version

      - name: "Download and build crosstool-ng"
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |-
          wget http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-$CROSSTOOL_NG_VERSION.tar.bz2
          tar xf crosstool-ng-$CROSSTOOL_NG_VERSION.tar.bz2
          cd crosstool-ng-$CROSSTOOL_NG_VERSION

          cat << 'EOF' | patch -p1
          diff --git a/configure b/configure
          index 8237712..f375511 100755
          --- a/configure
          +++ b/configure
          @@ -5799,7 +5799,7 @@ do
               for ac_exec_ext in '' $ac_executable_extensions; do
                 ac_path_BASH_SHELL="$as_dir/$ac_prog$ac_exec_ext"
                 as_fn_executable_p "$ac_path_BASH_SHELL" || continue
          -ver=`$ac_path_BASH_SHELL --version 2>/dev/null| $EGREP '^GNU bash, version (3\.[1-9]|4)'`
          +ver=`$ac_path_BASH_SHELL --version 2>/dev/null| $EGREP '^GNU bash, version (3\.[1-9]|4|5)'`
                           test -z "$ac_cv_path_BASH_SHELL" && ac_cv_path_BASH_SHELL=$ac_path_BASH_SHELL
                           test -n "$ver" && ac_cv_path_BASH_SHELL="$ac_path_BASH_SHELL" ac_path_BASH_SHELL_found=: acx_version_BASH_SHELL_ok=:
                 $ac_path_BASH_SHELL_found && break 3
          @@ -5818,7 +5818,7 @@ fi
           { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_BASH_SHELL" >&5
           $as_echo "$ac_cv_path_BASH_SHELL" >&6; }
                if test -n "BASH_SHELL"; then :
          -  ver=`$ac_path_BASH_SHELL --version 2>/dev/null| $EGREP '^GNU bash, version (3\.[1-9]|4)'`
          +  ver=`$ac_path_BASH_SHELL --version 2>/dev/null| $EGREP '^GNU bash, version (3\.[1-9]|4|5)'`
                      test -n "$ver" && acx_version_BASH_SHELL_ok=:
           fi
                { $as_echo "$as_me:${as_lineno-$LINENO}: checking for GNU bash >= 3.1" >&5
          diff --git a/scripts/build/companion_libs/121-isl.sh b/scripts/build/companion_libs/121-isl.sh
          index ef93bbd..3794376 100644
          --- a/scripts/build/companion_libs/121-isl.sh
          +++ b/scripts/build/companion_libs/121-isl.sh
          @@ -14,7 +14,7 @@ if [ "${CT_ISL}" = "y" ]; then
           # Download ISL
           do_isl_get() {
               CT_GetFile "isl-${CT_ISL_VERSION}" \
          -        http://isl.gforge.inria.fr
          +        https://gcc.gnu.org/pub/gcc/infrastructure
           }
          
           # Extract ISL
          EOF

          ./configure --enable-local
          make
          sudo make install

      - name: "Configure target ${{ matrix.target }}"
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |-
          cd crosstool-ng-$CROSSTOOL_NG_VERSION
          ./ct-ng

          config_path=./samples/${{ matrix.target }}
          target=${{ matrix.target }}
          cp -r ${{ github.workspace}}/samples/${target%%-*}-unknown-linux-gnu $config_path

          if [[ -n "${{ matrix.vendor }}" ]]; then
            echo "CT_TARGET_VENDOR=\"${{ matrix.vendor }}\"" >> $config_path/crosstool.config
          fi
          
          linux_ver=${{ matrix.linux }}
          if [[ "${{ matrix.vendor }}" == "rhel7" ]]; then
            wget https://github.com/Kong/crosstool-ng-actions/releases/download/0.7.0/linux-${{ matrix.linux }}.tar.gz
            echo "CT_KERNEL_LINUX_CUSTOM=y" >> $config_path/crosstool.config
            echo "CT_KERNEL_LINUX_CUSTOM_LOCATION=\"$(pwd)/linux-${{ matrix.linux }}.tar.gz\"" >> $config_path/crosstool.config
            echo "CT_KERNEL_LINUX_CUSTOM_VERSION=\"${{ matrix.linux }}\"" >> $config_path/crosstool.config
          else
            echo "CT_LINUX_V_${linux_ver//./_}=y" >> $config_path/crosstool.config
          fi

          glibc_ver=${{ matrix.glibc }}
          echo "CT_GLIBC_V_${glibc_ver//./_}=y" >> $config_path/crosstool.config

          gcc_ver=${{ matrix.gcc }}
          echo "CT_GCC_V_${gcc_ver//./_}=y" >> $config_path/crosstool.config
          # 1.23.0
          echo "CT_CC_GCC_V_${gcc_ver//./_}=y" >> $config_path/crosstool.config

          if [[ "$gcc_ver" == 7.3.0 ]]; then
            echo 'CT_ISL_V_0_16=y' >> $config_path/crosstool.config
          elif [[ "$gcc_ver" == 4.8.5 ]]; then
            echo "CT_ISL_V_0_11_1=y" >> $config_path/crosstool.config
          fi

          echo "CT_LOG_PROGRESS_BAR=n" >> $config_path/crosstool.config
          
          cat $config_path/crosstool.config

          ./ct-ng ${{ matrix.target }}
          
          # replace the minor/patch version
          sed -i 's/CT_GCC_VERSION=.*/CT_GCC_VERSION="'${gcc_ver}'"/' .config

      - name: 'Build ${{ matrix.target }}'
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |-
          cd crosstool-ng-$CROSSTOOL_NG_VERSION

          export HOME=$GITHUB_WORKSPACE

          ./ct-ng build

          find $HOME/x-tools/

      - name: 'Package ${{ matrix.target }}'
        id: package
        run: |-
          target=${{ matrix.target }}
          tar -zcvf ${{ matrix.target }}.tar.gz -C $GITHUB_WORKSPACE/x-tools --exclude=build.log.bz2 $target

      - name: 'Set asset name'
        id: asset_name
        run: |-
          asset=${{ matrix.target }}.tar.gz
          gcc_ver=${{ matrix.gcc }}
          gcc_major_ver=${gcc_ver%%.*}
          libc="-glibc-${{ matrix.glibc }}"
          asset=${{ matrix.target }}${libc}-gcc-${gcc_major_ver}.tar.gz

          echo "asset=$asset" >> $GITHUB_OUTPUT

      - id: upload-artifacts
        name: Upload artifacts
        if: '${{ success() }}'
        continue-on-error: false
        uses: actions/upload-artifact@v4
        with:
          path: '${{ matrix.target }}.tar.gz'
          name: '${{ steps.asset_name.outputs.asset }}'

      - id: upload-releases
        name: Upload to releases
        uses: actions/upload-release-asset@v1
        if: '${{ github.event.inputs.do_release == ''true'' }}'
        continue-on-error: false
        with:
          asset_path: '${{ matrix.target }}.tar.gz'
          asset_name: '${{ steps.asset_name.outputs.asset }}'
          upload_url: '${{ needs.prepare.outputs.upload_url }}'
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

